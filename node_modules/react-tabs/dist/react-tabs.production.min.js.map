{"version":3,"file":"react-tabs.production.min.js","sources":["../src/helpers/elementTypes.js","../src/helpers/childrenDeepMap.js","../node_modules/clsx/dist/clsx.m.js","../src/helpers/uuid.js","../src/components/UncontrolledTabs.js","../src/helpers/count.js","../src/components/Tabs.js","../src/components/TabList.js","../src/components/Tab.js","../src/components/TabPanel.js"],"sourcesContent":["function makeTypeChecker(tabsRole) {\n  return (element) => !!element.type && element.type.tabsRole === tabsRole;\n}\n\nexport const isTab = makeTypeChecker('Tab');\nexport const isTabList = makeTypeChecker('TabList');\nexport const isTabPanel = makeTypeChecker('TabPanel');\n","import { Children, cloneElement } from 'react';\nimport { isTabPanel, isTab, isTabList } from './elementTypes';\n\nfunction isTabChild(child) {\n  return isTab(child) || isTabList(child) || isTabPanel(child);\n}\n\nexport function deepMap(children, callback) {\n  return Children.map(children, (child) => {\n    // null happens when conditionally rendering TabPanel/Tab\n    // see https://github.com/reactjs/react-tabs/issues/37\n    if (child === null) return null;\n\n    if (isTabChild(child)) {\n      return callback(child);\n    }\n\n    if (\n      child.props &&\n      child.props.children &&\n      typeof child.props.children === 'object'\n    ) {\n      // Clone the child that has children and map them too\n      return cloneElement(child, {\n        ...child.props,\n        children: deepMap(child.props.children, callback),\n      });\n    }\n\n    return child;\n  });\n}\n\nexport function deepForEach(children, callback) {\n  return Children.forEach(children, (child) => {\n    // null happens when conditionally rendering TabPanel/Tab\n    // see https://github.com/reactjs/react-tabs/issues/37\n    if (child === null) return;\n\n    if (isTab(child) || isTabPanel(child)) {\n      callback(child);\n    } else if (\n      child.props &&\n      child.props.children &&\n      typeof child.props.children === 'object'\n    ) {\n      if (isTabList(child)) callback(child);\n      deepForEach(child.props.children, callback);\n    }\n  });\n}\n","function toVal(mix) {\n\tvar k, y, str='';\n\n\tif (typeof mix === 'string' || typeof mix === 'number') {\n\t\tstr += mix;\n\t} else if (typeof mix === 'object') {\n\t\tif (Array.isArray(mix)) {\n\t\t\tfor (k=0; k < mix.length; k++) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tif (y = toVal(mix[k])) {\n\t\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\t\tstr += y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor (k in mix) {\n\t\t\t\tif (mix[k]) {\n\t\t\t\t\tstr && (str += ' ');\n\t\t\t\t\tstr += k;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn str;\n}\n\nexport default function () {\n\tvar i=0, tmp, x, str='';\n\twhile (i < arguments.length) {\n\t\tif (tmp = arguments[i++]) {\n\t\t\tif (x = toVal(tmp)) {\n\t\t\t\tstr && (str += ' ');\n\t\t\t\tstr += x\n\t\t\t}\n\t\t}\n\t}\n\treturn str;\n}\n","// Get a universally unique identifier\nlet count = 0;\nexport default function uuid() {\n  return `react-tabs-${count++}`;\n}\n\nexport function reset() {\n  count = 0;\n}\n","import PropTypes from 'prop-types';\nimport React, { cloneElement, Component } from 'react';\nimport cx from 'clsx';\nimport uuid from '../helpers/uuid';\nimport { childrenPropType } from '../helpers/propTypes';\nimport { getPanelsCount, getTabsCount } from '../helpers/count';\nimport { deepMap } from '../helpers/childrenDeepMap';\nimport { isTabList, isTabPanel, isTab } from '../helpers/elementTypes';\n\nfunction isNode(node) {\n  return node && 'getAttribute' in node;\n}\n\n// Determine if a node from event.target is a Tab element\nfunction isTabNode(node) {\n  return isNode(node) && node.getAttribute('role') === 'tab';\n}\n\n// Determine if a tab node is disabled\nfunction isTabDisabled(node) {\n  return isNode(node) && node.getAttribute('aria-disabled') === 'true';\n}\n\nlet canUseActiveElement;\n\nfunction determineCanUseActiveElement(environment) {\n  const env =\n    environment || (typeof window !== 'undefined' ? window : undefined);\n\n  try {\n    canUseActiveElement = !!(\n      typeof env !== 'undefined' &&\n      env.document &&\n      env.document.activeElement\n    );\n  } catch (e) {\n    // Work around for IE bug when accessing document.activeElement in an iframe\n    // Refer to the following resources:\n    // http://stackoverflow.com/a/10982960/369687\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12733599\n    canUseActiveElement = false;\n  }\n}\nexport default class UncontrolledTabs extends Component {\n  static defaultProps = {\n    className: 'react-tabs',\n    focus: false,\n  };\n\n  static propTypes = {\n    children: childrenPropType,\n    direction: PropTypes.oneOf(['rtl', 'ltr']),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    disabledTabClassName: PropTypes.string,\n    disableUpDownKeys: PropTypes.bool,\n    domRef: PropTypes.func,\n    focus: PropTypes.bool,\n    forceRenderTabPanel: PropTypes.bool,\n    onSelect: PropTypes.func.isRequired,\n    selectedIndex: PropTypes.number.isRequired,\n    selectedTabClassName: PropTypes.string,\n    selectedTabPanelClassName: PropTypes.string,\n    environment: PropTypes.object,\n  };\n\n  tabNodes = [];\n\n  setSelected(index, event) {\n    // Check index boundary\n    if (index < 0 || index >= this.getTabsCount()) return;\n\n    const { onSelect, selectedIndex } = this.props;\n\n    // Call change event handler\n    onSelect(index, selectedIndex, event);\n  }\n\n  getNextTab(index) {\n    const count = this.getTabsCount();\n\n    // Look for non-disabled tab from index to the last tab on the right\n    for (let i = index + 1; i < count; i++) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // If no tab found, continue searching from first on left to index\n    for (let i = 0; i < index; i++) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // No tabs are disabled, return index\n    return index;\n  }\n\n  getPrevTab(index) {\n    let i = index;\n\n    // Look for non-disabled tab from index to first tab on the left\n    while (i--) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // If no tab found, continue searching from last tab on right to index\n    i = this.getTabsCount();\n    while (i-- > index) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    // No tabs are disabled, return index\n    return index;\n  }\n\n  getFirstTab() {\n    const count = this.getTabsCount();\n\n    // Look for non disabled tab from the first tab\n    for (let i = 0; i < count; i++) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  getLastTab() {\n    let i = this.getTabsCount();\n\n    // Look for non disabled tab from the last tab\n    while (i--) {\n      if (!isTabDisabled(this.getTab(i))) {\n        return i;\n      }\n    }\n\n    return null;\n  }\n\n  getTabsCount() {\n    const { children } = this.props;\n    return getTabsCount(children);\n  }\n\n  getPanelsCount() {\n    const { children } = this.props;\n    return getPanelsCount(children);\n  }\n\n  getTab(index) {\n    return this.tabNodes[`tabs-${index}`];\n  }\n\n  getChildren() {\n    let index = 0;\n    const {\n      children,\n      disabledTabClassName,\n      focus,\n      forceRenderTabPanel,\n      selectedIndex,\n      selectedTabClassName,\n      selectedTabPanelClassName,\n      environment,\n    } = this.props;\n\n    this.tabIds = this.tabIds || [];\n    this.panelIds = this.panelIds || [];\n    let diff = this.tabIds.length - this.getTabsCount();\n\n    // Add ids if new tabs have been added\n    // Don't bother removing ids, just keep them in case they are added again\n    // This is more efficient, and keeps the uuid counter under control\n    while (diff++ < 0) {\n      this.tabIds.push(uuid());\n      this.panelIds.push(uuid());\n    }\n\n    // Map children to dynamically setup refs\n    return deepMap(children, (child) => {\n      let result = child;\n\n      // Clone TabList and Tab components to have refs\n      if (isTabList(child)) {\n        let listIndex = 0;\n\n        // Figure out if the current focus in the DOM is set on a Tab\n        // If it is we should keep the focus on the next selected tab\n        let wasTabFocused = false;\n\n        if (canUseActiveElement == null) {\n          determineCanUseActiveElement(environment);\n        }\n\n        if (canUseActiveElement) {\n          wasTabFocused = React.Children.toArray(child.props.children)\n            .filter(isTab)\n            .some((tab, i) => {\n              const env =\n                environment ||\n                (typeof window !== 'undefined' ? window : undefined);\n              return env && env.document.activeElement === this.getTab(i);\n            });\n        }\n\n        result = cloneElement(child, {\n          children: deepMap(child.props.children, (tab) => {\n            const key = `tabs-${listIndex}`;\n            const selected = selectedIndex === listIndex;\n\n            const props = {\n              tabRef: (node) => {\n                this.tabNodes[key] = node;\n              },\n              id: this.tabIds[listIndex],\n              panelId: this.panelIds[listIndex],\n              selected,\n              focus: selected && (focus || wasTabFocused),\n            };\n\n            if (selectedTabClassName)\n              props.selectedClassName = selectedTabClassName;\n            if (disabledTabClassName)\n              props.disabledClassName = disabledTabClassName;\n\n            listIndex++;\n\n            return cloneElement(tab, props);\n          }),\n        });\n      } else if (isTabPanel(child)) {\n        const props = {\n          id: this.panelIds[index],\n          tabId: this.tabIds[index],\n          selected: selectedIndex === index,\n        };\n\n        if (forceRenderTabPanel) props.forceRender = forceRenderTabPanel;\n        if (selectedTabPanelClassName)\n          props.selectedClassName = selectedTabPanelClassName;\n\n        index++;\n\n        result = cloneElement(child, props);\n      }\n\n      return result;\n    });\n  }\n\n  handleKeyDown = (e) => {\n    const { direction, disableUpDownKeys } = this.props;\n    if (this.isTabFromContainer(e.target)) {\n      let { selectedIndex: index } = this.props;\n      let preventDefault = false;\n      let useSelectedIndex = false;\n\n      if (e.keyCode === 32 || e.keyCode === 13) {\n        preventDefault = true;\n        useSelectedIndex = false;\n        this.handleClick(e);\n      }\n\n      if (e.keyCode === 37 || (!disableUpDownKeys && e.keyCode === 38)) {\n        // Select next tab to the left, validate if up arrow is not disabled\n        if (direction === 'rtl') {\n          index = this.getNextTab(index);\n        } else {\n          index = this.getPrevTab(index);\n        }\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 39 || (!disableUpDownKeys && e.keyCode === 40)) {\n        // Select next tab to the right, validate if down arrow is not disabled\n        if (direction === 'rtl') {\n          index = this.getPrevTab(index);\n        } else {\n          index = this.getNextTab(index);\n        }\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 35) {\n        // Select last tab (End key)\n        index = this.getLastTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      } else if (e.keyCode === 36) {\n        // Select first tab (Home key)\n        index = this.getFirstTab();\n        preventDefault = true;\n        useSelectedIndex = true;\n      }\n\n      // This prevents scrollbars from moving around\n      if (preventDefault) {\n        e.preventDefault();\n      }\n\n      // Only use the selected index in the state if we're not using the tabbed index\n      if (useSelectedIndex) {\n        this.setSelected(index, e);\n      }\n    }\n  };\n\n  handleClick = (e) => {\n    let node = e.target;\n    do {\n      if (this.isTabFromContainer(node)) {\n        if (isTabDisabled(node)) {\n          return;\n        }\n\n        const index = [].slice\n          .call(node.parentNode.children)\n          .filter(isTabNode)\n          .indexOf(node);\n        this.setSelected(index, e);\n        return;\n      }\n    } while ((node = node.parentNode) != null);\n  };\n\n  /**\n   * Determine if a node from event.target is a Tab element for the current Tabs container.\n   * If the clicked element is not a Tab, it returns false.\n   * If it finds another Tabs container between the Tab and `this`, it returns false.\n   */\n  isTabFromContainer(node) {\n    // return immediately if the clicked element is not a Tab.\n    if (!isTabNode(node)) {\n      return false;\n    }\n\n    // Check if the first occurrence of a Tabs container is `this` one.\n    let nodeAncestor = node.parentElement;\n    do {\n      if (nodeAncestor === this.node) return true;\n      if (nodeAncestor.getAttribute('data-tabs')) break;\n\n      nodeAncestor = nodeAncestor.parentElement;\n    } while (nodeAncestor);\n\n    return false;\n  }\n\n  render() {\n    // Delete all known props, so they don't get added to DOM\n    const {\n      children, // unused\n      className,\n      disabledTabClassName, // unused\n      domRef,\n      focus, // unused\n      forceRenderTabPanel, // unused\n      onSelect, // unused\n      selectedIndex, // unused\n      selectedTabClassName, // unused\n      selectedTabPanelClassName, // unused\n      environment, // unused\n      disableUpDownKeys, // unused\n      ...attributes\n    } = this.props;\n\n    return (\n      <div\n        {...attributes}\n        className={cx(className)}\n        onClick={this.handleClick}\n        onKeyDown={this.handleKeyDown}\n        ref={(node) => {\n          this.node = node;\n          if (domRef) domRef(node);\n        }}\n        data-tabs\n      >\n        {this.getChildren()}\n      </div>\n    );\n  }\n}\n","import { deepForEach } from './childrenDeepMap';\nimport { isTab, isTabPanel } from './elementTypes';\n\nexport function getTabsCount(children) {\n  let tabCount = 0;\n  deepForEach(children, (child) => {\n    if (isTab(child)) tabCount++;\n  });\n\n  return tabCount;\n}\n\nexport function getPanelsCount(children) {\n  let panelCount = 0;\n  deepForEach(children, (child) => {\n    if (isTabPanel(child)) panelCount++;\n  });\n\n  return panelCount;\n}\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n  childrenPropType,\n  onSelectPropType,\n  selectedIndexPropType,\n} from '../helpers/propTypes';\nimport UncontrolledTabs from './UncontrolledTabs';\nimport { getTabsCount } from '../helpers/count';\n\nconst MODE_CONTROLLED = 0;\nconst MODE_UNCONTROLLED = 1;\n\nexport default class Tabs extends Component {\n  static defaultProps = {\n    defaultFocus: false,\n    forceRenderTabPanel: false,\n    selectedIndex: null,\n    defaultIndex: null,\n    environment: null,\n    disableUpDownKeys: false,\n  };\n\n  static propTypes = {\n    children: childrenPropType,\n    direction: PropTypes.oneOf(['rtl', 'ltr']),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    defaultFocus: PropTypes.bool,\n    defaultIndex: PropTypes.number,\n    disabledTabClassName: PropTypes.string,\n    disableUpDownKeys: PropTypes.bool,\n    domRef: PropTypes.func,\n    forceRenderTabPanel: PropTypes.bool,\n    onSelect: onSelectPropType,\n    selectedIndex: selectedIndexPropType,\n    selectedTabClassName: PropTypes.string,\n    selectedTabPanelClassName: PropTypes.string,\n    environment: PropTypes.object,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = Tabs.copyPropsToState(this.props, {}, props.defaultFocus);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return Tabs.copyPropsToState(props, state);\n  }\n\n  static getModeFromProps(props) {\n    return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;\n  }\n\n  handleSelected = (index, last, event) => {\n    const { onSelect } = this.props;\n    const { mode } = this.state;\n\n    // Call change event handler\n    if (typeof onSelect === 'function') {\n      // Check if the change event handler cancels the tab change\n      if (onSelect(index, last, event) === false) return;\n    }\n\n    const state = {\n      // Set focus if the change was triggered from the keyboard\n      focus: event.type === 'keydown',\n    };\n\n    if (mode === MODE_UNCONTROLLED) {\n      // Update selected index\n      state.selectedIndex = index;\n    }\n\n    this.setState(state);\n  };\n\n  // preserve the existing selectedIndex from state.\n  // If the state has not selectedIndex, default to the defaultIndex or 0\n  static copyPropsToState(props, state, focus = false) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      state.mode !== undefined &&\n      state.mode !== Tabs.getModeFromProps(props)\n    ) {\n      throw new Error(\n        `Switching between controlled mode (by using \\`selectedIndex\\`) and uncontrolled mode is not supported in \\`Tabs\\`.\nFor more information about controlled and uncontrolled mode of react-tabs see https://github.com/reactjs/react-tabs#controlled-vs-uncontrolled-mode.`,\n      );\n    }\n\n    const newState = {\n      focus,\n      mode: Tabs.getModeFromProps(props),\n    };\n\n    if (newState.mode === MODE_UNCONTROLLED) {\n      const maxTabIndex = Math.max(0, getTabsCount(props.children) - 1);\n      let selectedIndex = null;\n\n      if (state.selectedIndex != null) {\n        selectedIndex = Math.min(state.selectedIndex, maxTabIndex);\n      } else {\n        selectedIndex = props.defaultIndex || 0;\n      }\n      newState.selectedIndex = selectedIndex;\n    }\n\n    return newState;\n  }\n\n  render() {\n    const { children, defaultIndex, defaultFocus, ...props } = this.props;\n    const { focus, selectedIndex } = this.state;\n\n    props.focus = focus;\n    props.onSelect = this.handleSelected;\n\n    if (selectedIndex != null) {\n      props.selectedIndex = selectedIndex;\n    }\n\n    return <UncontrolledTabs {...props}>{children}</UncontrolledTabs>;\n  }\n}\n\nTabs.tabsRole = 'Tabs';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cx from 'clsx';\n\nexport default class TabList extends Component {\n  static defaultProps = {\n    className: 'react-tabs__tab-list',\n  };\n\n  static propTypes = {\n    children: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n  };\n\n  render() {\n    const { children, className, ...attributes } = this.props;\n\n    return (\n      <ul {...attributes} className={cx(className)} role=\"tablist\">\n        {children}\n      </ul>\n    );\n  }\n}\n\nTabList.tabsRole = 'TabList';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cx from 'clsx';\n\nconst DEFAULT_CLASS = 'react-tabs__tab';\n\nexport default class Tab extends Component {\n  static defaultProps = {\n    className: DEFAULT_CLASS,\n    disabledClassName: `${DEFAULT_CLASS}--disabled`,\n    focus: false,\n    id: null,\n    panelId: null,\n    selected: false,\n    selectedClassName: `${DEFAULT_CLASS}--selected`,\n  };\n\n  static propTypes = {\n    children: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.object,\n      PropTypes.string,\n    ]),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    disabled: PropTypes.bool,\n    tabIndex: PropTypes.string,\n    disabledClassName: PropTypes.string,\n    focus: PropTypes.bool, // private\n    id: PropTypes.string, // private\n    panelId: PropTypes.string, // private\n    selected: PropTypes.bool, // private\n    selectedClassName: PropTypes.string,\n    tabRef: PropTypes.func, // private\n  };\n\n  componentDidMount() {\n    this.checkFocus();\n  }\n\n  componentDidUpdate() {\n    this.checkFocus();\n  }\n\n  checkFocus() {\n    const { selected, focus } = this.props;\n    if (selected && focus) {\n      this.node.focus();\n    }\n  }\n\n  render() {\n    const {\n      children,\n      className,\n      disabled,\n      disabledClassName,\n      focus, // unused\n      id,\n      panelId,\n      selected,\n      selectedClassName,\n      tabIndex,\n      tabRef,\n      ...attributes\n    } = this.props;\n\n    return (\n      <li\n        {...attributes}\n        className={cx(className, {\n          [selectedClassName]: selected,\n          [disabledClassName]: disabled,\n        })}\n        ref={(node) => {\n          this.node = node;\n          if (tabRef) tabRef(node);\n        }}\n        role=\"tab\"\n        id={id}\n        aria-selected={selected ? 'true' : 'false'}\n        aria-disabled={disabled ? 'true' : 'false'}\n        aria-controls={panelId}\n        tabIndex={tabIndex || (selected ? '0' : null)}\n      >\n        {children}\n      </li>\n    );\n  }\n}\n\nTab.tabsRole = 'Tab';\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport cx from 'clsx';\n\nconst DEFAULT_CLASS = 'react-tabs__tab-panel';\n\nexport default class TabPanel extends Component {\n  static defaultProps = {\n    className: DEFAULT_CLASS,\n    forceRender: false,\n    selectedClassName: `${DEFAULT_CLASS}--selected`,\n  };\n\n  static propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object,\n    ]),\n    forceRender: PropTypes.bool,\n    id: PropTypes.string, // private\n    selected: PropTypes.bool, // private\n    selectedClassName: PropTypes.string,\n    tabId: PropTypes.string, // private\n  };\n\n  render() {\n    const {\n      children,\n      className,\n      forceRender,\n      id,\n      selected,\n      selectedClassName,\n      tabId,\n      ...attributes\n    } = this.props;\n\n    return (\n      <div\n        {...attributes}\n        className={cx(className, {\n          [selectedClassName]: selected,\n        })}\n        role=\"tabpanel\"\n        id={id}\n        aria-labelledby={tabId}\n      >\n        {forceRender || selected ? children : null}\n      </div>\n    );\n  }\n}\n\nTabPanel.tabsRole = 'TabPanel';\n"],"names":["makeTypeChecker","tabsRole","element","type","isTab","isTabList","isTabPanel","deepMap","children","callback","Children","map","child","isTabChild","props","cloneElement","deepForEach","forEach","toVal","mix","k","y","str","Array","isArray","length","tmp","x","i","arguments","canUseActiveElement","count","uuid","getTabsCount","tabCount","isNode","node","isTabNode","getAttribute","isTabDisabled","UncontrolledTabs","tabNodes","handleKeyDown","e","_this","direction","disableUpDownKeys","isTabFromContainer","target","index","selectedIndex","preventDefault","useSelectedIndex","keyCode","handleClick","getNextTab","getPrevTab","getLastTab","getFirstTab","setSelected","slice","call","parentNode","filter","indexOf","event","this","onSelect","getTab","getPanelsCount","panelCount","getChildren","disabledTabClassName","focus","forceRenderTabPanel","selectedTabClassName","selectedTabPanelClassName","environment","tabIds","panelIds","diff","push","result","listIndex","wasTabFocused","env","window","undefined","document","activeElement","determineCanUseActiveElement","React","toArray","some","tab","_this2","key","selected","tabRef","id","panelId","selectedClassName","disabledClassName","tabId","forceRender","nodeAncestor","parentElement","render","className","domRef","attributes","cx","onClick","onKeyDown","ref","_this3","Component","defaultProps","Tabs","handleSelected","last","mode","state","setState","copyPropsToState","defaultFocus","getDerivedStateFromProps","getModeFromProps","newState","maxTabIndex","Math","max","min","defaultIndex","TabList","role","DEFAULT_CLASS","Tab","componentDidMount","checkFocus","componentDidUpdate","disabled","tabIndex","TabPanel"],"mappings":"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"}