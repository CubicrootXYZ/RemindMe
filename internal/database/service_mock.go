// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/database (interfaces: Service)

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddInputToChannel mocks base method.
func (m *MockService) AddInputToChannel(arg0 uint, arg1 *Input) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInputToChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInputToChannel indicates an expected call of AddInputToChannel.
func (mr *MockServiceMockRecorder) AddInputToChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInputToChannel", reflect.TypeOf((*MockService)(nil).AddInputToChannel), arg0, arg1)
}

// AddOutputToChannel mocks base method.
func (m *MockService) AddOutputToChannel(arg0 uint, arg1 *Output) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOutputToChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOutputToChannel indicates an expected call of AddOutputToChannel.
func (mr *MockServiceMockRecorder) AddOutputToChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOutputToChannel", reflect.TypeOf((*MockService)(nil).AddOutputToChannel), arg0, arg1)
}

// DeleteChannel mocks base method.
func (m *MockService) DeleteChannel(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockServiceMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockService)(nil).DeleteChannel), arg0)
}

// GetChannelByID mocks base method.
func (m *MockService) GetChannelByID(arg0 uint) (*Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByID", arg0)
	ret0, _ := ret[0].(*Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelByID indicates an expected call of GetChannelByID.
func (mr *MockServiceMockRecorder) GetChannelByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByID", reflect.TypeOf((*MockService)(nil).GetChannelByID), arg0)
}

// GetChannels mocks base method.
func (m *MockService) GetChannels() ([]Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannels")
	ret0, _ := ret[0].([]Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannels indicates an expected call of GetChannels.
func (mr *MockServiceMockRecorder) GetChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannels", reflect.TypeOf((*MockService)(nil).GetChannels))
}

// GetEventsByChannel mocks base method.
func (m *MockService) GetEventsByChannel(arg0 uint) ([]Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsByChannel", arg0)
	ret0, _ := ret[0].([]Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsByChannel indicates an expected call of GetEventsByChannel.
func (mr *MockServiceMockRecorder) GetEventsByChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsByChannel", reflect.TypeOf((*MockService)(nil).GetEventsByChannel), arg0)
}

// GetEventsPending mocks base method.
func (m *MockService) GetEventsPending() ([]Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsPending")
	ret0, _ := ret[0].([]Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsPending indicates an expected call of GetEventsPending.
func (mr *MockServiceMockRecorder) GetEventsPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsPending", reflect.TypeOf((*MockService)(nil).GetEventsPending))
}

// GetInputByID mocks base method.
func (m *MockService) GetInputByID(arg0 uint) (*Input, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInputByID", arg0)
	ret0, _ := ret[0].(*Input)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInputByID indicates an expected call of GetInputByID.
func (mr *MockServiceMockRecorder) GetInputByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInputByID", reflect.TypeOf((*MockService)(nil).GetInputByID), arg0)
}

// GetInputByType mocks base method.
func (m *MockService) GetInputByType(arg0 uint, arg1 string) (*Input, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInputByType", arg0, arg1)
	ret0, _ := ret[0].(*Input)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInputByType indicates an expected call of GetInputByType.
func (mr *MockServiceMockRecorder) GetInputByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInputByType", reflect.TypeOf((*MockService)(nil).GetInputByType), arg0, arg1)
}

// GetOutputByID mocks base method.
func (m *MockService) GetOutputByID(arg0 uint) (*Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputByID", arg0)
	ret0, _ := ret[0].(*Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputByID indicates an expected call of GetOutputByID.
func (mr *MockServiceMockRecorder) GetOutputByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputByID", reflect.TypeOf((*MockService)(nil).GetOutputByID), arg0)
}

// GetOutputByType mocks base method.
func (m *MockService) GetOutputByType(arg0 uint, arg1 string) (*Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutputByType", arg0, arg1)
	ret0, _ := ret[0].(*Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOutputByType indicates an expected call of GetOutputByType.
func (mr *MockServiceMockRecorder) GetOutputByType(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutputByType", reflect.TypeOf((*MockService)(nil).GetOutputByType), arg0, arg1)
}

// GormDB mocks base method.
func (m *MockService) GormDB() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GormDB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GormDB indicates an expected call of GormDB.
func (mr *MockServiceMockRecorder) GormDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GormDB", reflect.TypeOf((*MockService)(nil).GormDB))
}

// NewChannel mocks base method.
func (m *MockService) NewChannel(arg0 *Channel) (*Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChannel", arg0)
	ret0, _ := ret[0].(*Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewChannel indicates an expected call of NewChannel.
func (mr *MockServiceMockRecorder) NewChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChannel", reflect.TypeOf((*MockService)(nil).NewChannel), arg0)
}

// NewEvent mocks base method.
func (m *MockService) NewEvent(arg0 *Event) (*Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEvent", arg0)
	ret0, _ := ret[0].(*Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewEvent indicates an expected call of NewEvent.
func (mr *MockServiceMockRecorder) NewEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEvent", reflect.TypeOf((*MockService)(nil).NewEvent), arg0)
}

// NewEvents mocks base method.
func (m *MockService) NewEvents(arg0 []Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEvents", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewEvents indicates an expected call of NewEvents.
func (mr *MockServiceMockRecorder) NewEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEvents", reflect.TypeOf((*MockService)(nil).NewEvents), arg0)
}

// RemoveInputFromChannel mocks base method.
func (m *MockService) RemoveInputFromChannel(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInputFromChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveInputFromChannel indicates an expected call of RemoveInputFromChannel.
func (mr *MockServiceMockRecorder) RemoveInputFromChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInputFromChannel", reflect.TypeOf((*MockService)(nil).RemoveInputFromChannel), arg0, arg1)
}

// RemoveOutputFromChannel mocks base method.
func (m *MockService) RemoveOutputFromChannel(arg0, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveOutputFromChannel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveOutputFromChannel indicates an expected call of RemoveOutputFromChannel.
func (mr *MockServiceMockRecorder) RemoveOutputFromChannel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveOutputFromChannel", reflect.TypeOf((*MockService)(nil).RemoveOutputFromChannel), arg0, arg1)
}

// UpdateChannel mocks base method.
func (m *MockService) UpdateChannel(arg0 *Channel) (*Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0)
	ret0, _ := ret[0].(*Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel.
func (mr *MockServiceMockRecorder) UpdateChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockService)(nil).UpdateChannel), arg0)
}

// UpdateEvent mocks base method.
func (m *MockService) UpdateEvent(arg0 *Event) (*Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0)
	ret0, _ := ret[0].(*Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockServiceMockRecorder) UpdateEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockService)(nil).UpdateEvent), arg0)
}

// UpdateOutput mocks base method.
func (m *MockService) UpdateOutput(arg0 *Output) (*Output, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOutput", arg0)
	ret0, _ := ret[0].(*Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOutput indicates an expected call of UpdateOutput.
func (mr *MockServiceMockRecorder) UpdateOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOutput", reflect.TypeOf((*MockService)(nil).UpdateOutput), arg0)
}
