// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/types (interfaces: Database)

// Package mock_types is a generated GoMock package.
package mock_types

import (
	sql "database/sql"
	reflect "reflect"
	time "time"

	database "github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/database"
	roles "github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/roles"
	gomock "github.com/golang/mock/gomock"
	event "maunium.net/go/mautrix/event"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddChannel mocks base method.
func (m *MockDatabase) AddChannel(arg0, arg1 string, arg2 roles.Role) (*database.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChannel", arg0, arg1, arg2)
	ret0, _ := ret[0].(*database.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddChannel indicates an expected call of AddChannel.
func (mr *MockDatabaseMockRecorder) AddChannel(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChannel", reflect.TypeOf((*MockDatabase)(nil).AddChannel), arg0, arg1, arg2)
}

// AddEvent mocks base method.
func (m *MockDatabase) AddEvent(arg0 *database.Event) (*database.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", arg0)
	ret0, _ := ret[0].(*database.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockDatabaseMockRecorder) AddEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockDatabase)(nil).AddEvent), arg0)
}

// AddMessage mocks base method.
func (m *MockDatabase) AddMessage(arg0 *database.Message) (*database.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessage", arg0)
	ret0, _ := ret[0].(*database.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessage indicates an expected call of AddMessage.
func (mr *MockDatabaseMockRecorder) AddMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessage", reflect.TypeOf((*MockDatabase)(nil).AddMessage), arg0)
}

// AddMessageFromMatrix mocks base method.
func (m *MockDatabase) AddMessageFromMatrix(arg0 string, arg1 int64, arg2 *event.MessageEventContent, arg3 *database.Reminder, arg4 database.MessageType, arg5 *database.Channel) (*database.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageFromMatrix", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*database.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMessageFromMatrix indicates an expected call of AddMessageFromMatrix.
func (mr *MockDatabaseMockRecorder) AddMessageFromMatrix(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageFromMatrix", reflect.TypeOf((*MockDatabase)(nil).AddMessageFromMatrix), arg0, arg1, arg2, arg3, arg4, arg5)
}

// AddOrUpdateThirdPartyResourceReminder mocks base method.
func (m *MockDatabase) AddOrUpdateThirdPartyResourceReminder(arg0 time.Time, arg1 string, arg2, arg3 uint, arg4 string) (*database.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateThirdPartyResourceReminder", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*database.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrUpdateThirdPartyResourceReminder indicates an expected call of AddOrUpdateThirdPartyResourceReminder.
func (mr *MockDatabaseMockRecorder) AddOrUpdateThirdPartyResourceReminder(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateThirdPartyResourceReminder", reflect.TypeOf((*MockDatabase)(nil).AddOrUpdateThirdPartyResourceReminder), arg0, arg1, arg2, arg3, arg4)
}

// AddReminder mocks base method.
func (m *MockDatabase) AddReminder(arg0 time.Time, arg1 string, arg2 bool, arg3 uint64, arg4 *database.Channel) (*database.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReminder", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*database.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReminder indicates an expected call of AddReminder.
func (mr *MockDatabaseMockRecorder) AddReminder(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReminder", reflect.TypeOf((*MockDatabase)(nil).AddReminder), arg0, arg1, arg2, arg3, arg4)
}

// AddThirdPartyResource mocks base method.
func (m *MockDatabase) AddThirdPartyResource(arg0 *database.ThirdPartyResource) (*database.ThirdPartyResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddThirdPartyResource", arg0)
	ret0, _ := ret[0].(*database.ThirdPartyResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddThirdPartyResource indicates an expected call of AddThirdPartyResource.
func (mr *MockDatabaseMockRecorder) AddThirdPartyResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddThirdPartyResource", reflect.TypeOf((*MockDatabase)(nil).AddThirdPartyResource), arg0)
}

// AddUserToBlocklist mocks base method.
func (m *MockDatabase) AddUserToBlocklist(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToBlocklist", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToBlocklist indicates an expected call of AddUserToBlocklist.
func (mr *MockDatabaseMockRecorder) AddUserToBlocklist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToBlocklist", reflect.TypeOf((*MockDatabase)(nil).AddUserToBlocklist), arg0, arg1)
}

// ChannelCount mocks base method.
func (m *MockDatabase) ChannelCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChannelCount indicates an expected call of ChannelCount.
func (mr *MockDatabaseMockRecorder) ChannelCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelCount", reflect.TypeOf((*MockDatabase)(nil).ChannelCount))
}

// ChannelSaveChanges mocks base method.
func (m *MockDatabase) ChannelSaveChanges(arg0 *database.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChannelSaveChanges", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChannelSaveChanges indicates an expected call of ChannelSaveChanges.
func (mr *MockDatabaseMockRecorder) ChannelSaveChanges(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChannelSaveChanges", reflect.TypeOf((*MockDatabase)(nil).ChannelSaveChanges), arg0)
}

// CleanAdminChannels mocks base method.
func (m *MockDatabase) CleanAdminChannels(arg0 []*database.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanAdminChannels", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanAdminChannels indicates an expected call of CleanAdminChannels.
func (mr *MockDatabaseMockRecorder) CleanAdminChannels(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanAdminChannels", reflect.TypeOf((*MockDatabase)(nil).CleanAdminChannels), arg0)
}

// DeleteChannel mocks base method.
func (m *MockDatabase) DeleteChannel(arg0 *database.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannel indicates an expected call of DeleteChannel.
func (mr *MockDatabaseMockRecorder) DeleteChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannel", reflect.TypeOf((*MockDatabase)(nil).DeleteChannel), arg0)
}

// DeleteChannelsFromUser mocks base method.
func (m *MockDatabase) DeleteChannelsFromUser(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChannelsFromUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChannelsFromUser indicates an expected call of DeleteChannelsFromUser.
func (mr *MockDatabaseMockRecorder) DeleteChannelsFromUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChannelsFromUser", reflect.TypeOf((*MockDatabase)(nil).DeleteChannelsFromUser), arg0)
}

// DeleteReminder mocks base method.
func (m *MockDatabase) DeleteReminder(arg0 uint) (*database.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReminder", arg0)
	ret0, _ := ret[0].(*database.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReminder indicates an expected call of DeleteReminder.
func (mr *MockDatabaseMockRecorder) DeleteReminder(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReminder", reflect.TypeOf((*MockDatabase)(nil).DeleteReminder), arg0)
}

// DeleteThirdPartyResource mocks base method.
func (m *MockDatabase) DeleteThirdPartyResource(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteThirdPartyResource", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteThirdPartyResource indicates an expected call of DeleteThirdPartyResource.
func (mr *MockDatabaseMockRecorder) DeleteThirdPartyResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteThirdPartyResource", reflect.TypeOf((*MockDatabase)(nil).DeleteThirdPartyResource), arg0)
}

// GenerateNewCalendarSecret mocks base method.
func (m *MockDatabase) GenerateNewCalendarSecret(arg0 *database.Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewCalendarSecret", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateNewCalendarSecret indicates an expected call of GenerateNewCalendarSecret.
func (mr *MockDatabaseMockRecorder) GenerateNewCalendarSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewCalendarSecret", reflect.TypeOf((*MockDatabase)(nil).GenerateNewCalendarSecret), arg0)
}

// GetBlockedUserList mocks base method.
func (m *MockDatabase) GetBlockedUserList() ([]database.Blocklist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockedUserList")
	ret0, _ := ret[0].([]database.Blocklist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockedUserList indicates an expected call of GetBlockedUserList.
func (mr *MockDatabaseMockRecorder) GetBlockedUserList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockedUserList", reflect.TypeOf((*MockDatabase)(nil).GetBlockedUserList))
}

// GetChannel mocks base method.
func (m *MockDatabase) GetChannel(arg0 uint) (*database.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannel", arg0)
	ret0, _ := ret[0].(*database.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannel indicates an expected call of GetChannel.
func (mr *MockDatabaseMockRecorder) GetChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannel", reflect.TypeOf((*MockDatabase)(nil).GetChannel), arg0)
}

// GetChannelByUserAndChannelIdentifier mocks base method.
func (m *MockDatabase) GetChannelByUserAndChannelIdentifier(arg0, arg1 string) (*database.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByUserAndChannelIdentifier", arg0, arg1)
	ret0, _ := ret[0].(*database.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelByUserAndChannelIdentifier indicates an expected call of GetChannelByUserAndChannelIdentifier.
func (mr *MockDatabaseMockRecorder) GetChannelByUserAndChannelIdentifier(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByUserAndChannelIdentifier", reflect.TypeOf((*MockDatabase)(nil).GetChannelByUserAndChannelIdentifier), arg0, arg1)
}

// GetChannelByUserIdentifier mocks base method.
func (m *MockDatabase) GetChannelByUserIdentifier(arg0 string) (*database.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelByUserIdentifier", arg0)
	ret0, _ := ret[0].(*database.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelByUserIdentifier indicates an expected call of GetChannelByUserIdentifier.
func (mr *MockDatabaseMockRecorder) GetChannelByUserIdentifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelByUserIdentifier", reflect.TypeOf((*MockDatabase)(nil).GetChannelByUserIdentifier), arg0)
}

// GetChannelList mocks base method.
func (m *MockDatabase) GetChannelList() ([]database.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelList")
	ret0, _ := ret[0].([]database.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelList indicates an expected call of GetChannelList.
func (mr *MockDatabaseMockRecorder) GetChannelList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelList", reflect.TypeOf((*MockDatabase)(nil).GetChannelList))
}

// GetChannelsByChannelIdentifier mocks base method.
func (m *MockDatabase) GetChannelsByChannelIdentifier(arg0 string) ([]database.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelsByChannelIdentifier", arg0)
	ret0, _ := ret[0].([]database.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelsByChannelIdentifier indicates an expected call of GetChannelsByChannelIdentifier.
func (mr *MockDatabaseMockRecorder) GetChannelsByChannelIdentifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelsByChannelIdentifier", reflect.TypeOf((*MockDatabase)(nil).GetChannelsByChannelIdentifier), arg0)
}

// GetChannelsByUserIdentifier mocks base method.
func (m *MockDatabase) GetChannelsByUserIdentifier(arg0 string) ([]database.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannelsByUserIdentifier", arg0)
	ret0, _ := ret[0].([]database.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannelsByUserIdentifier indicates an expected call of GetChannelsByUserIdentifier.
func (mr *MockDatabaseMockRecorder) GetChannelsByUserIdentifier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannelsByUserIdentifier", reflect.TypeOf((*MockDatabase)(nil).GetChannelsByUserIdentifier), arg0)
}

// GetLastMessageByTypeForReminder mocks base method.
func (m *MockDatabase) GetLastMessageByTypeForReminder(arg0 database.MessageType, arg1 uint) (*database.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastMessageByTypeForReminder", arg0, arg1)
	ret0, _ := ret[0].(*database.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMessageByTypeForReminder indicates an expected call of GetLastMessageByTypeForReminder.
func (mr *MockDatabaseMockRecorder) GetLastMessageByTypeForReminder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMessageByTypeForReminder", reflect.TypeOf((*MockDatabase)(nil).GetLastMessageByTypeForReminder), arg0, arg1)
}

// GetMessageByExternalID mocks base method.
func (m *MockDatabase) GetMessageByExternalID(arg0 string) (*database.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByExternalID", arg0)
	ret0, _ := ret[0].(*database.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByExternalID indicates an expected call of GetMessageByExternalID.
func (mr *MockDatabaseMockRecorder) GetMessageByExternalID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByExternalID", reflect.TypeOf((*MockDatabase)(nil).GetMessageByExternalID), arg0)
}

// GetMessagesByReminderID mocks base method.
func (m *MockDatabase) GetMessagesByReminderID(arg0 uint) ([]*database.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByReminderID", arg0)
	ret0, _ := ret[0].([]*database.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByReminderID indicates an expected call of GetMessagesByReminderID.
func (mr *MockDatabaseMockRecorder) GetMessagesByReminderID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByReminderID", reflect.TypeOf((*MockDatabase)(nil).GetMessagesByReminderID), arg0)
}

// GetPendingReminders mocks base method.
func (m *MockDatabase) GetPendingReminders(arg0 *database.Channel) ([]database.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingReminders", arg0)
	ret0, _ := ret[0].([]database.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingReminders indicates an expected call of GetPendingReminders.
func (mr *MockDatabaseMockRecorder) GetPendingReminders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingReminders", reflect.TypeOf((*MockDatabase)(nil).GetPendingReminders), arg0)
}

// GetReminderForChannelIDByID mocks base method.
func (m *MockDatabase) GetReminderForChannelIDByID(arg0 string, arg1 int) (*database.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReminderForChannelIDByID", arg0, arg1)
	ret0, _ := ret[0].(*database.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReminderForChannelIDByID indicates an expected call of GetReminderForChannelIDByID.
func (mr *MockDatabaseMockRecorder) GetReminderForChannelIDByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReminderForChannelIDByID", reflect.TypeOf((*MockDatabase)(nil).GetReminderForChannelIDByID), arg0, arg1)
}

// GetThirdPartyResources mocks base method.
func (m *MockDatabase) GetThirdPartyResources(arg0 database.ThirdPartyResourceType) ([]database.ThirdPartyResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThirdPartyResources", arg0)
	ret0, _ := ret[0].([]database.ThirdPartyResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThirdPartyResources indicates an expected call of GetThirdPartyResources.
func (mr *MockDatabaseMockRecorder) GetThirdPartyResources(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThirdPartyResources", reflect.TypeOf((*MockDatabase)(nil).GetThirdPartyResources), arg0)
}

// GetThirdPartyResourcesByChannel mocks base method.
func (m *MockDatabase) GetThirdPartyResourcesByChannel(arg0 uint) ([]database.ThirdPartyResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetThirdPartyResourcesByChannel", arg0)
	ret0, _ := ret[0].([]database.ThirdPartyResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetThirdPartyResourcesByChannel indicates an expected call of GetThirdPartyResourcesByChannel.
func (mr *MockDatabaseMockRecorder) GetThirdPartyResourcesByChannel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetThirdPartyResourcesByChannel", reflect.TypeOf((*MockDatabase)(nil).GetThirdPartyResourcesByChannel), arg0)
}

// IsEventKnown mocks base method.
func (m *MockDatabase) IsEventKnown(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEventKnown", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEventKnown indicates an expected call of IsEventKnown.
func (mr *MockDatabaseMockRecorder) IsEventKnown(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEventKnown", reflect.TypeOf((*MockDatabase)(nil).IsEventKnown), arg0)
}

// IsUserBlocked mocks base method.
func (m *MockDatabase) IsUserBlocked(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserBlocked", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserBlocked indicates an expected call of IsUserBlocked.
func (mr *MockDatabaseMockRecorder) IsUserBlocked(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserBlocked", reflect.TypeOf((*MockDatabase)(nil).IsUserBlocked), arg0)
}

// RemoveUserFromBlocklist mocks base method.
func (m *MockDatabase) RemoveUserFromBlocklist(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserFromBlocklist", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserFromBlocklist indicates an expected call of RemoveUserFromBlocklist.
func (mr *MockDatabaseMockRecorder) RemoveUserFromBlocklist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserFromBlocklist", reflect.TypeOf((*MockDatabase)(nil).RemoveUserFromBlocklist), arg0)
}

// SQLDB mocks base method.
func (m *MockDatabase) SQLDB() (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SQLDB")
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SQLDB indicates an expected call of SQLDB.
func (mr *MockDatabaseMockRecorder) SQLDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SQLDB", reflect.TypeOf((*MockDatabase)(nil).SQLDB))
}

// UpdateChannel mocks base method.
func (m *MockDatabase) UpdateChannel(arg0 uint, arg1 string, arg2 *uint, arg3 *roles.Role) (*database.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChannel", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*database.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateChannel indicates an expected call of UpdateChannel.
func (mr *MockDatabaseMockRecorder) UpdateChannel(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChannel", reflect.TypeOf((*MockDatabase)(nil).UpdateChannel), arg0, arg1, arg2, arg3)
}

// UpdateReminder mocks base method.
func (m *MockDatabase) UpdateReminder(arg0 uint, arg1 time.Time, arg2, arg3 uint64) (*database.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReminder", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*database.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReminder indicates an expected call of UpdateReminder.
func (mr *MockDatabaseMockRecorder) UpdateReminder(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReminder", reflect.TypeOf((*MockDatabase)(nil).UpdateReminder), arg0, arg1, arg2, arg3)
}
