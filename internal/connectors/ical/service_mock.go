// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/connectors/ical (interfaces: Service)

// Package ical is a generated GoMock package.
package ical

import (
	reflect "reflect"
	time "time"

	database "github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/connectors/ical/database"
	daemon "github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/daemon"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetOutput mocks base method.
func (m *MockService) GetOutput(arg0 uint, arg1 bool) (*database.IcalOutput, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutput", arg0, arg1)
	ret0, _ := ret[0].(*database.IcalOutput)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOutput indicates an expected call of GetOutput.
func (mr *MockServiceMockRecorder) GetOutput(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutput", reflect.TypeOf((*MockService)(nil).GetOutput), arg0, arg1)
}

// InputRemoved mocks base method.
func (m *MockService) InputRemoved(arg0 string, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputRemoved", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InputRemoved indicates an expected call of InputRemoved.
func (mr *MockServiceMockRecorder) InputRemoved(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputRemoved", reflect.TypeOf((*MockService)(nil).InputRemoved), arg0, arg1)
}

// NewOutput mocks base method.
func (m *MockService) NewOutput(arg0 uint) (*database.IcalOutput, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewOutput", arg0)
	ret0, _ := ret[0].(*database.IcalOutput)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewOutput indicates an expected call of NewOutput.
func (mr *MockServiceMockRecorder) NewOutput(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewOutput", reflect.TypeOf((*MockService)(nil).NewOutput), arg0)
}

// OutputRemoved mocks base method.
func (m *MockService) OutputRemoved(arg0 string, arg1 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputRemoved", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutputRemoved indicates an expected call of OutputRemoved.
func (mr *MockServiceMockRecorder) OutputRemoved(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputRemoved", reflect.TypeOf((*MockService)(nil).OutputRemoved), arg0, arg1)
}

// SendDailyReminder mocks base method.
func (m *MockService) SendDailyReminder(arg0 *daemon.DailyReminder, arg1 *daemon.Output) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDailyReminder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDailyReminder indicates an expected call of SendDailyReminder.
func (mr *MockServiceMockRecorder) SendDailyReminder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDailyReminder", reflect.TypeOf((*MockService)(nil).SendDailyReminder), arg0, arg1)
}

// SendReminder mocks base method.
func (m *MockService) SendReminder(arg0 *daemon.Event, arg1 *daemon.Output) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendReminder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendReminder indicates an expected call of SendReminder.
func (mr *MockServiceMockRecorder) SendReminder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendReminder", reflect.TypeOf((*MockService)(nil).SendReminder), arg0, arg1)
}

// Start mocks base method.
func (m *MockService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockService)(nil).Start))
}

// Stop mocks base method.
func (m *MockService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockService)(nil).Stop))
}

// ToLocalTime mocks base method.
func (m *MockService) ToLocalTime(arg0 time.Time, arg1 *daemon.Output) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToLocalTime", arg0, arg1)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ToLocalTime indicates an expected call of ToLocalTime.
func (mr *MockServiceMockRecorder) ToLocalTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToLocalTime", reflect.TypeOf((*MockService)(nil).ToLocalTime), arg0, arg1)
}
