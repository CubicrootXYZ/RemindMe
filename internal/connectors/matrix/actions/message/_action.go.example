package message

import (
	"regexp"
	"strings"

	"github.com/CubicrootXYZ/gologger"
	"github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/connectors/matrix"
	matrixdb "github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/connectors/matrix/database"
	"github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/connectors/matrix/format"
	"github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/connectors/matrix/messenger"
	"github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/database"
	"maunium.net/go/mautrix"
)

var exampleActionRegex = regexp.MustCompile("(?i)example .*")

// ExampleAction acts as a template for new actions.
type ExampleAction struct {
	logger    gologger.Logger
	client    mautrixcl.Client
	messenger messenger.Messenger
	matrixDB  matrixdb.Service
	db        database.Service
}

// Configure is called on startup and sets all dependencies.
func (action *ExampleAction) Configure(logger gologger.Logger, client mautrixcl.Client, messenger messenger.Messenger, matrixDB matrixdb.Service, db database.Service, _ *matrix.BridgeServices) {
	action.logger = logger
	action.client = client
	action.matrixDB = matrixDB
	action.db = db
	action.messenger = messenger
}

// Name of the action
func (action *ExampleAction) Name() string {
	return "Add user"
}

// GetDocu returns the documentation for the action.
func (action *ExampleAction) GetDocu() (title, explaination string, examples []string) {
	return "Example event",
		"Description",
		[]string{"example 1"}
}

// Selector defines a regex on what messages the action should be used.
func (action *ExampleAction) Selector() *regexp.Regexp {
	return exampleActionRegex
}

// HandleEvent is where the message event get's send to if it matches the Selector.
func (action *ExampleAction) HandleEvent(event *matrix.MessageEvent) {
	action.logger.Infof("Example action called")
}
