// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/connectors/matrix/database (interfaces: Service)

// Package database is a generated GoMock package.
package database

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteAllEventsFromRoom mocks base method.
func (m *MockService) DeleteAllEventsFromRoom(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllEventsFromRoom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllEventsFromRoom indicates an expected call of DeleteAllEventsFromRoom.
func (mr *MockServiceMockRecorder) DeleteAllEventsFromRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllEventsFromRoom", reflect.TypeOf((*MockService)(nil).DeleteAllEventsFromRoom), arg0)
}

// DeleteAllMessagesFromRoom mocks base method.
func (m *MockService) DeleteAllMessagesFromRoom(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllMessagesFromRoom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllMessagesFromRoom indicates an expected call of DeleteAllMessagesFromRoom.
func (mr *MockServiceMockRecorder) DeleteAllMessagesFromRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllMessagesFromRoom", reflect.TypeOf((*MockService)(nil).DeleteAllMessagesFromRoom), arg0)
}

// DeleteRoom mocks base method.
func (m *MockService) DeleteRoom(arg0 uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockServiceMockRecorder) DeleteRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockService)(nil).DeleteRoom), arg0)
}

// GetEventByID mocks base method.
func (m *MockService) GetEventByID(arg0 string) (*MatrixEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByID", arg0)
	ret0, _ := ret[0].(*MatrixEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByID indicates an expected call of GetEventByID.
func (mr *MockServiceMockRecorder) GetEventByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByID", reflect.TypeOf((*MockService)(nil).GetEventByID), arg0)
}

// GetLastMessage mocks base method.
func (m *MockService) GetLastMessage() (*MatrixMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastMessage")
	ret0, _ := ret[0].(*MatrixMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastMessage indicates an expected call of GetLastMessage.
func (mr *MockServiceMockRecorder) GetLastMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastMessage", reflect.TypeOf((*MockService)(nil).GetLastMessage))
}

// GetMessageByID mocks base method.
func (m *MockService) GetMessageByID(arg0 string) (*MatrixMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", arg0)
	ret0, _ := ret[0].(*MatrixMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockServiceMockRecorder) GetMessageByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockService)(nil).GetMessageByID), arg0)
}

// GetRoomByID mocks base method.
func (m *MockService) GetRoomByID(arg0 string) (*MatrixRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomByID", arg0)
	ret0, _ := ret[0].(*MatrixRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomByID indicates an expected call of GetRoomByID.
func (mr *MockServiceMockRecorder) GetRoomByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomByID", reflect.TypeOf((*MockService)(nil).GetRoomByID), arg0)
}

// GetRoomCount mocks base method.
func (m *MockService) GetRoomCount() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomCount")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomCount indicates an expected call of GetRoomCount.
func (mr *MockServiceMockRecorder) GetRoomCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomCount", reflect.TypeOf((*MockService)(nil).GetRoomCount))
}

// GetUserByID mocks base method.
func (m *MockService) GetUserByID(arg0 string) (*MatrixUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0)
	ret0, _ := ret[0].(*MatrixUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockServiceMockRecorder) GetUserByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockService)(nil).GetUserByID), arg0)
}

// NewEvent mocks base method.
func (m *MockService) NewEvent(arg0 *MatrixEvent) (*MatrixEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewEvent", arg0)
	ret0, _ := ret[0].(*MatrixEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewEvent indicates an expected call of NewEvent.
func (mr *MockServiceMockRecorder) NewEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewEvent", reflect.TypeOf((*MockService)(nil).NewEvent), arg0)
}

// NewMessage mocks base method.
func (m *MockService) NewMessage(arg0 *MatrixMessage) (*MatrixMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewMessage", arg0)
	ret0, _ := ret[0].(*MatrixMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewMessage indicates an expected call of NewMessage.
func (mr *MockServiceMockRecorder) NewMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewMessage", reflect.TypeOf((*MockService)(nil).NewMessage), arg0)
}

// NewRoom mocks base method.
func (m *MockService) NewRoom(arg0 *MatrixRoom) (*MatrixRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRoom", arg0)
	ret0, _ := ret[0].(*MatrixRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRoom indicates an expected call of NewRoom.
func (mr *MockServiceMockRecorder) NewRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRoom", reflect.TypeOf((*MockService)(nil).NewRoom), arg0)
}

// NewUser mocks base method.
func (m *MockService) NewUser(arg0 *MatrixUser) (*MatrixUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", arg0)
	ret0, _ := ret[0].(*MatrixUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockServiceMockRecorder) NewUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockService)(nil).NewUser), arg0)
}

// UpdateRoom mocks base method.
func (m *MockService) UpdateRoom(arg0 *MatrixRoom) (*MatrixRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", arg0)
	ret0, _ := ret[0].(*MatrixRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockServiceMockRecorder) UpdateRoom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockService)(nil).UpdateRoom), arg0)
}
