// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/connectors/matrix (interfaces: ReplyAction)

// Package matrix is a generated GoMock package.
package matrix

import (
	reflect "reflect"
	regexp "regexp"

	gologger "github.com/CubicrootXYZ/gologger"
	database "github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/connectors/matrix/database"
	messenger "github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/connectors/matrix/messenger"
	database0 "github.com/CubicrootXYZ/matrix-reminder-and-calendar-bot/internal/database"
	gomock "github.com/golang/mock/gomock"
	mautrix "maunium.net/go/mautrix"
)

// MockReplyAction is a mock of ReplyAction interface.
type MockReplyAction struct {
	ctrl     *gomock.Controller
	recorder *MockReplyActionMockRecorder
}

// MockReplyActionMockRecorder is the mock recorder for MockReplyAction.
type MockReplyActionMockRecorder struct {
	mock *MockReplyAction
}

// NewMockReplyAction creates a new mock instance.
func NewMockReplyAction(ctrl *gomock.Controller) *MockReplyAction {
	mock := &MockReplyAction{ctrl: ctrl}
	mock.recorder = &MockReplyActionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReplyAction) EXPECT() *MockReplyActionMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockReplyAction) Configure(arg0 gologger.Logger, arg1 *mautrix.Client, arg2 messenger.Messenger, arg3 database.Service, arg4 database0.Service) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Configure", arg0, arg1, arg2, arg3, arg4)
}

// Configure indicates an expected call of Configure.
func (mr *MockReplyActionMockRecorder) Configure(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockReplyAction)(nil).Configure), arg0, arg1, arg2, arg3, arg4)
}

// HandleEvent mocks base method.
func (m *MockReplyAction) HandleEvent(arg0 *MessageEvent, arg1 *database.MatrixMessage) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleEvent", arg0, arg1)
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockReplyActionMockRecorder) HandleEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockReplyAction)(nil).HandleEvent), arg0, arg1)
}

// Name mocks base method.
func (m *MockReplyAction) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockReplyActionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockReplyAction)(nil).Name))
}

// Selector mocks base method.
func (m *MockReplyAction) Selector() *regexp.Regexp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Selector")
	ret0, _ := ret[0].(*regexp.Regexp)
	return ret0
}

// Selector indicates an expected call of Selector.
func (mr *MockReplyActionMockRecorder) Selector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Selector", reflect.TypeOf((*MockReplyAction)(nil).Selector))
}
